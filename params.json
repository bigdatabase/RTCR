{
  "name": "RTCR",
  "tagline": "A pipeline for complete and accurate recovery  of TCR repertoires from high throughput sequencing data.",
  "body": "rtcr\r\n====\r\n\r\nRecover T Cell Receptor (RTCR) is a pipeline for complete and accurate recovery\r\nof TCR repertoires from high throughput sequencing data.\r\n\r\nInstallation\r\n============\r\n\r\nRTCR requires an external aligner, we have chosen for Bowtie 2, but if you\r\nwould like to use your own, read the section \"switching aligners\".\r\n\r\n1) Install Bowtie 2\r\n\r\nPlease go to http://bowtie-bio.sourceforge.net/bowtie2/index.shtml and follow\r\nthe instructions on how to download and install Bowtie 2.\r\n\r\n2) Install the RTCR package (http://uubram.github.io/RTCR/)\r\n\r\nDownload the zip file and extract it. Open a terminal and go to the newly\r\nextracted RTCR folder and run::\r\n        \r\n        python setup.py install\r\n\r\nOr if there are permission issues (e.g. not having root access) run::\r\n        \r\n        python setup.py install --user\r\n\r\nTo test if everything went well, type \"rtcr\" (and press enter). This should\r\nresult in a help being printed showing the command line options of RTCR.\r\n\r\n3) Configure RTCR\r\n\r\nRTCR needs to know where Bowtie 2 is installed, specifically it needs to know\r\nthe directory where the 'bowtie2-build' and 'bowtie2' executables reside::\r\n\r\n        rtcr Config Aligner.location=/path/to/bowtie2/\r\n\r\nFor more details on configuring RTCR, see the \"Configuration\" section\r\n\r\nQuick start\r\n===========\r\n\r\nAnalysing the non-barcoded sample::\r\n\r\n        mkdir my_analysis\r\n        cd my_analysis\r\n        rtcr run -i ../reads.fq.gz\r\n\r\nAnalysing the barcoded sample::\r\n\r\n        mkdir my_barcoded_analysis\r\n        cd my_barcoded_analysis\r\n        rtcr Checkout -rc -b ../barcodes.txt -i ../umi_reads.fq.gz\r\n        rtcr umi_group_ec -i S1.fastq -o S1_umi_group_ec.fastq\r\n        rtcr run -i S1_umi_group_ec.fastq\r\n\r\nUsage\r\n=====\r\n\r\nRTCR has a single entry-point, the \"rtcr\" command, with which everything is\r\nrun. With different arguments, RTCR can be configured, instructed to do barcode\r\nerror correction, or run an analysis.\r\n\r\nRTCR takes FastaQ files as input. These files can be zipped to save disk space.\r\nAs an example, let us assume you have a zipped dataset called \"reads.fastq.gz\"\r\nin a directory \"/data\", and the reads are from a human TcR-beta repertoire.\r\n\r\nFirst, create an empty directory, for example::\r\n\r\n        cd /data\r\n        mkdir my_analysis\r\n        cd my_analysis\r\n\r\nNow we can analyse the dataset as follows::\r\n\r\n        rtcr run --reads ../reads.fastq.gz\r\n\r\nRTCR will produce several files (see \"Output files\" section for more details),\r\nbut the retrieved clones will end up in a tab-delimited file called\r\n\"results.tsv\". If something went wrong, please check the \"rtcr.log\" file in the\r\nsame directory.\r\n\r\n.. IMPORTANT::\r\n\r\n        Start analyses in an empty folder. If the alignments file\r\n        \"alignments.sam.gz\" already exists, RTCR will *not* perform alignments\r\n        and use this file instead.\r\n\r\n.. NOTE::\r\n\r\n        If you have a paired-end HTS dataset, please merge the read-pairs first\r\n        using a program such as pear\r\n        (http://sco.h-its.org/exelixis/web/software/pear/).\r\n\r\nTo use a different germline reference, for example to analyse a mouse TcR-alpha\r\nrepertoire HTS dataset (e.g. \"mouse.fastq\"), use the \"--species\" and \"--gene\"\r\noptions as follows::\r\n\r\n        rtcr run --reads mouse.fastq --species MusMusculus --gene TRA\r\n\r\nFinally, if you want to prevent RTCR from merging clones with the same CDR3 but\r\ndifferent VJ combination, use the \"--no_VJ_collapsing\" option.\r\n\r\nOutput files\r\n============\r\n\r\nThe \"rtcr run\" command produces many files, each of these will be explained\r\nbelow:\r\n\r\n- alignments.sam.gz\r\n        SAM records from the aligner, with alignments between the\r\n        germline V and J sequences and the reads. The VJ alignments to the\r\n        reads occur together, starting with the V alignments. Hence, the first\r\n        record is a V alignment, the second a J alignment to the same read.\r\n\r\n- aln_stats.csv\r\n        Alignments statistics for the different sequence lengths\r\n        (CDR3 by default; \"seqlen\" column), counting the number of bases (\"n\"),\r\n        mismatches (\"mm\"), insertions (\"ins\"), and deletions (\"dels\")\r\n        encountered in the alignments of the V or J (\"region\" column). This\r\n        data is used to calculate the various error rates that RTCR uses.\r\n\r\n- Q_mm_stats.csv\r\n        For the V and J region alignments (\"region\" column), the\r\n        number of bases (\"n\"), and number of mismatches (\"mm\") found of\r\n        the bases having a certain Phred score (\"Q\"). This data is used by\r\n        RTCR to calculate a normalization factor.\r\n\r\n- Q_mm_stats_plot.pdf\r\n        Graphical representation of Q_mm_stats.csv. This file is not created\r\n        if matplotlib is not installed.\r\n\r\n- r.tsv\r\n        Raw clones identified by RTCR before error correction.\r\n\r\n- rqi.tsv\r\n        Clones after QMerge and IMerge algorithms have run.\r\n\r\n- rqil.tsv\r\n        Clones after QMerge, IMerge, and LMerge algorithms have run.\r\n\r\n- results.tsv\r\n        Final list of clones after error correction and post-processing.\r\n\r\nAnalysing a barcoded HTS dataset\r\n================================\r\n\r\nFirst RTCR needs to identify the unique molecular identifiers (UMIs) in the\r\nreads. For this it requires the sequence of the primer(s) that contain the UMI.\r\nLet's assume we have a barcoded HTS dataset (\"umi_reads.fastq\") with one sample\r\nand a 12bp long UMI.\r\n\r\nFor this create a file call \"barcodes.txt\" with the following contents::\r\n\r\n        S1      aagcagtggtaTCAACGcagagNNNNNNNNNNNNcttggggg\r\n\r\nIn the first column is the name of the sample, here \"S1\". The second column,\r\nseparated from the first by a tab, contains the primer sequence where the \"N\"\r\nbases denote the location of the UMI. To look for the UMI, RTCR will search the\r\nread for a 'seed' sequence, that is indicated in the primer by a stretch of\r\nupper case bases (non-N). In the above it is \"TCAACG\". This seed sequence is\r\nrequired as RTCR will search the read for a perfect match to this sequence, and\r\nthen search for the remaining lower-case DNA bases. By default there are only\r\n2 mismatches allowed in the lower-case bases. To ask RTCR to search for the\r\nUMIs, run::\r\n\r\n        rtcr Checkout -i reads.fastq -b barcodes.txt -rc\r\n\r\nThe \"-rc\" switch is used to tell RTCR to also look for the UMI in the reverse\r\ncomplement of the reads. The above should create a file called \"S1.fastq\". This\r\nfile contains the reads in which RTCR managed to identify a UMI.\r\n\r\nNext, to perform barcode error correction::\r\n\r\n        rtcr umi_group_ec -i S1.fastq -o S1_umi_group_ec.fastq\r\n\r\nThe \"S1_umi_group_ec.fastq\" file contains the barcode error corrected reads.\r\nAfter this one can perform the regular HTS analysis the same as for\r\nnon-barcoded HTS datasets::\r\n\r\n        rtcr run --reads S1_umi_group_ec.fastq\r\n\r\nConfiguration\r\n=============\r\n\r\nRTCR can be easily configured using the \"rtcr Config\" command. To find out its\r\nusage, type::\r\n\r\n        rtcr Config -h\r\n\r\nTo see the entire configuration file (can be big), type::\r\n\r\n        rtcr Config\r\n\r\nIf you'd rather edit the config file directly, search for the \"config.ini\" file\r\nin the \"RTCR\" folder of the package.\r\n\r\nThe ini file contains different sections, denoted with the brackets \"[\" and\r\n\"]\". These sections contain the different settings of RTCR. To check the value\r\nof a setting, say for example the default germline reference gene, type the\r\nname of its corresponding section and name of the key (in this case it is\r\nthe key \"gene\" in section \"Defaults\")::\r\n\r\n        rtcr Config Defaults.gene\r\n\r\nThe above should print out \"TRB\". Let's for example change this default to\r\nTCR alpha chains::\r\n\r\n        rtcr Config Defaults.gene=TRA\r\n\r\nSwitching aligners\r\n==================\r\n\r\nTo run rtcr with a different aligner, the values in the \"[Aligner]\" section\r\nof its configuration file (see \"Configuration\") should be updated. There are\r\nseveral requirements for the new aligner:\r\n1) It should support receiving FastaQ records via stdin (standard in)\r\n2) It should support writing SAM file format output to stdout (standard out)\r\n\r\nIf the aligner can do those things, then tell RTCR where the aligner is\r\nlocated with the \"location\" key. If the aligner does not build an\r\nindex, empty out the corresponding keys as follows::\r\n\r\n        rtcr Config Aligner.cmd_build_index=\r\n        rtcr Config Aligner.args_build_index=\r\n\r\nThe \"args_XXX\" keys are arguments that RTCR passes to commands given in the\r\n\"cmd_XXX\" keys. Before alignment, RTCR produces a reference fasta file from the\r\ngermline reference and passes this (using the \"args_build_index\" key) to the\r\ncommand to build an index (\"cmd_build_index\" key).  The \"%(ref_fn)s\" and\r\n\"%(index_fn)s\" in the \"args_build_index\" key refer to the reference fasta file\r\nand index filenames that RTCR uses internally.\r\n\r\nRTCR first aligns the V genes to the reads and then the J genes. It is possible\r\nto run the aligner with different arguments for both with the \"args_align_v\"\r\nand \"args_align_j\" keys respectively. Any arguments that are the same for both\r\ncan be put in \"args_align_base\". The \"%phred_encoding)s\" and \"%(n_threads)s\"\r\nparts of the arguments will contain the phred encoding (33 or 64) and number\r\nof threads respectively. It is optional to use these in the arguments.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}